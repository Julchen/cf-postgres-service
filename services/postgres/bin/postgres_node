#!/usr/bin/env ruby
# Copyright (c) 2009-2011 VMware, Inc.

ENV["BUNDLE_GEMFILE"] ||= File.expand_path("../../Gemfile", __FILE__)

require "rubygems"
require "bundler/setup"

$LOAD_PATH.unshift(File.expand_path("../../lib", __FILE__))

require "postgres_service/util"
require "postgres_service/node"

include VCAP::Services::Postgres::Util

config_file = File.expand_path("../../config/postgres_node.yml", __FILE__)

OptionParser.new do |opts|
  opts.banner = "Usage: postgres_node [options]"
  opts.on("-c", "--config [ARG]", "Configuration File") do |opt|
    config_file = opt
  end
  opts.on("-h", "--help", "Help") do
    puts opts
    exit
  end
end.parse!

begin
  config = YAML.load_file(config_file)
rescue => e
  puts "Could not read configuration file:  #{e}"
  exit
end

logger = Logger.new(parse_property(config, "log_file", String, :optional => true) || STDOUT, "daily")
logger.level = case (parse_property(config, "log_level", String, :optional => true) || "INFO")
  when "DEBUG" then Logger::DEBUG
  when "INFO" then Logger::INFO
  when "WARN" then Logger::WARN
  when "ERROR" then Logger::ERROR
  when "FATAL" then Logger::FATAL
  else Logger::UNKNOWN
end

options = {
  :logger => logger,
  :base_dir => parse_property(config, "base_dir", String),
  :available_storage => parse_property(config, "available_storage", Integer),
  :max_db_size => parse_property(config, "max_db_size", Integer),
  :max_long_query => parse_property(config, "max_long_query", Integer),
  :node_id => parse_property(config, "node_id", String),
  :mbus => parse_property(config, "mbus", String),
  :local_db => parse_property(config, "local_db", String),
  :postgres => parse_property(config, "postgres", Hash),
  :ip_route => parse_property(config, "ip_route", String, :optional => true),
  :socket => parse_property(config, "socket", String, :optional => true)
}

def shutdown(node)
  node.shutdown
  EM.stop
end

EM.error_handler do |e|
  logger.fatal("#{e}\n#{e.backtrace.join("\n")}")
  exit
end

pid_file = parse_property(config, "pid", String)
begin
  FileUtils.mkdir_p(File.dirname(pid_file))
rescue => e
  logger.fatal "Can't create pid directory, exiting: #{e}"
end
File.open(pid_file, 'w') { |f| f.puts "#{Process.pid}" }

EM.run do
  node = VCAP::Services::Postgres::Node.new(options)
  trap("INT") {shutdown(node)}
  trap("TERM") {shutdown(node)}
end

